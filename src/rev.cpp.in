/*
 * This file is part of FreeRCT.
 * FreeRCT is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, version 2.
 * FreeRCT is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with FreeRCT. If not, see <http://www.gnu.org/licenses/>.
 */

/** @file rev.cpp Autogenerated file with the revision and such of FreeRCT. */

#include "rev.h"
#include "stdafx.h"

/**
 * The text version of FreeRCT's revision.
 * This will be either "<major>.<minor>.<build>[-RC<rc>]",
 * "<commitdate YYYYmmdd-HHMM>.<vcs type><identifier>" or "norev.n000".
 *
 * The major, minor and build are the numbers that describe releases of
 * FreeRCT (like 0.5.3). "-RC" is used to flag release candidates.
 * Note: This format is not yet implemented in the configure script.
 *
 * The revision number is fairly straight forward. The first part is the
 * date of the last commit, in the format "%Y%m%d-%H%M", followed by a
 * '.', and then a VCS tag - 'r' for svn (including hgsvn and git svn),
 * 'h' for hg, and 'g' for git checkouts. This is finally followed by
 * the revision for that VCS.
 * e.g. 20130921-0929.r870
 *
 * norev.n000 is for non-releases that are made on systems where no VCS
 * detection was possible.
 */
const char _freerct_revision[] = "${VERSION_STRING}";

/**
 * The text version of FreeRCT's build date.
 * Updating the build date in this file is the safest as it generally gets
 * updated for each revision in contrary to most other files that only see
 * updates when they are actually changed themselves.
 */
const char _freerct_build_date[] = __DATE__ " " __TIME__;

static std::string _freerct_install_prefix("${CMAKE_INSTALL_PREFIX}/share/freerct");  ///< The location where all FreeRCT assets are installed.
static std::string _freerct_userdata_prefix_base("${USERDATA_PREFIX}");               ///< The location where the user's savegames and other data is stored.
static std::string _freerct_userdata_prefix_cache;                                    ///< Cache for the result of #freerct_userdata_prefix.

/**
 * Change the location where all FreeRCT assets are installed.
 * This should be called only during startup.
 * @param dir The path.
 */
void OverrideInstallPrefix(const char *dir)
{
	_freerct_install_prefix = dir;
}

/**
 * Change the location where all FreeRCT assets are installed.
 * This should be called only during startup.
 * @param dir The path.
 */
void OverrideUserdataPrefix(const char *dir)
{
	_freerct_userdata_prefix_base = dir;
	_freerct_userdata_prefix_cache.clear();
}

/**
 * The location where all FreeRCT assets are installed if "make install" was called.
 * @return The path.
 */
const char *freerct_install_prefix()
{
	return _freerct_install_prefix.c_str();
}

/**
 * The location where the user's savegames and other data is stored.
 * @return The path.
 * @todo This is written for static paths and Linux-specific homedir detection. Not tested in more convoluted conditions.
 */
const char *freerct_userdata_prefix()
{
	if (!_freerct_userdata_prefix_cache.empty()) return _freerct_userdata_prefix_cache.c_str();

	_freerct_userdata_prefix_cache = _freerct_userdata_prefix_base;

	/* While the USERDATA_PREFIX is expanded at compile-time, home directory expansion has to be performed at runtime to allow shipping binaries. */
	std::string substitute;
	for (;;) {
		const size_t pos = _freerct_userdata_prefix_cache.find('~');
		if (pos == std::string::npos) break;

		if (substitute.empty()) {
			for (auto& var : {"HOME", "USERPROFILE", "HOMEPATH", "APPDATA"}) {
				const char *environment_variable = getenv(var);
				if (environment_variable != nullptr && environment_variable[0] != '\0') {
					substitute = environment_variable;
					break;
				}
			}
			if (substitute.empty()) {
				fprintf(stderr, "Unable to locate the user home directory. Set the HOME environment variable to fix the problem.\n");
				NOT_REACHED();
			}
		}

		_freerct_userdata_prefix_cache = _freerct_userdata_prefix_cache.replace(pos, 1, substitute);
	}

	return _freerct_userdata_prefix_cache.c_str();
}
